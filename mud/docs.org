#+TITLE: Racket-MUD
#+HUGO_BASE_DIR: ~/dev/personal-website/
#+HUGO_SECTION: ./racket-mud/
#+HUGO_LAYOUT: single
#+TYPE: mud engine
#+OPTIONS: html-style:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css" />
* Racket-MUD
  :PROPERTIES:
  :EXPORT_FILE_NAME: _index
  :END:
*/Racket-MUD/* is a Racket package containing a /MUD engine/ written
by [[https://emsenn.net][emsenn]] and released for the benefit of the
commons. It is currently in *earliest alpha*.

*/MUDs/*, or /multi-user dimensions/, are a class of server where
clients traditionally receive text output and interact by typing
commands. They're an ancestor of modern MMORPGs and chat rooms. MUDs
are usually games, and are often role-playing games.

/Racket-MUD/ is the /engine/, or /driver/, for running a /MUD server/,
and is intended to be used with one or more /MUD libraries/: modules
that add game (or other) features.

*/[[https://grapevine.haus/games/Teraum/play][Play the Demo!]]/*

Or read more:
- [[./user-guide/][User Guide]]
- [[./host-manual/][Host Manual]]
- [[./development-guides/][Development Guides]]
- [[./roadmap/][Roadmap]]
- [[./changelog/][Changelog]]
- [[./known-libraries/][Known Libraries]]
- [[./known-servers/][Known Servers]]
* User Guide
  :PROPERTIES:
  :EXPORT_FILE_NAME: user-guide
  :EXPORT_HUGO_TYPE: documentation
  :END:
Thank you for your interest in using something powered by the Racket-MUD engine! This guide is an introduction to the basic concepts of the engine: the features that are independent of any library your server is running. (Don't worry: jargon like engine, library, and server will all be explicitly defined.)
#+TOC: headlines local 2
** Quickstart
The first thing you'll need to do as a new user is decide how you want to connect to the MUD: what client do you want to use. Next, you'll actually log in, meaning create a new user account. Finally, you'll be able to input commands to interact with server.
*** Connecting

*/NOTE:/* Until version 0.2.0, Racket-MUD will not properly handle the intricacies of telnet, and so there will be occasional rendering and input issues.

Telnet, MUSHClient, tinyfugue, emacs-mud.

Explanation of MUDSocket service: mccp compression, mxp.
*** Logging In
When you first connect to a Racket-MUD, you'll be shown some text, ultimately asking you to enter your user-name - or the user-name you want.

Once you type the name you want, hit enter, and your client will submit the command to the server. It'll do some parsing, and spit back a request: either taking you through logging in or account creation, depending on if your submission was an extant user-name.
*** Inputting Commands
Inputting commands is simple: type what you want and hit enter.

The trick is in understanding what syntax the engine expects for various commands. You can input @tt{help --domain=commands -s <command>} to ask what the syntax is for any given @tt{command}, but you'll need to understand the style conventions of the response:

In the above command, 'help' is the command, and '--domain=commands -s <command>' are the parameters. Parameters preceded by a - are "keyword parameters" while those without (typically put at the end of the command) are called "arguments."

Keyword parameters come in two types: those with a value, which start with -- like "--domain=commands", and those without, like -s. Those without a value are called "boolean parameters," because they take a keyword, in this case "s" for "syntax" and toggle it from @bold{false} to @bold{true}.

When displaying syntactical help, parameters shown inside <> are required and should be replaced by appropriate text. Parameters shown inside [] are optional. Parameters separated by | are choices. Don't include the brackets when inputting your command!

Here's what gets shown when you query the 'help' command's syntax:

@tt{help [--domain=commands|concepts|events|services] [-H|s] [term]}

This tells us the help command takes the optional keyword parameter 'domain', set to one of commands, concepts, events, or services. We can also pass it either the H or s boolean parameter, and a term.

So to describe the command above, you would say it is the help command submitted with the s boolean keyword parameter, the domain keyword parameter set to commands, and... blah blah blah.
** MUD Concepts
MUD stands for "multi-user dimension," and is a term used to describe a class of online communities. Most MUDs are games, and many MUDs are role-playing games.
*** Servers and Clients
I'm not entirely sure how old MUDs are. Older than the Web, but not as old as the Internet. They aren't the first online game we had, but they're one of the first that used a computer to handle real-time interactions between multiple players and a virtual world.
MUDs exist as a server, and you, the user, connect to them as a client, through an interface.

The server lives on some computer out there on the Internet, and you use a client on your computer to connect to it: log in, enter commands, and receive responses.

Because the commands and responses are text, servers running on Racket-MUD don't require a specific client. There are also a few dedicated MUD clients that offer more features. Point is, you don't need to download a bunch of stuff onto your computer to play a MUD - you can use what's already on your computer.

Say I'm running a game server called The Okaga, running on Racket-MUD at @tt{okaga.emsenn.net}, on port @tt{4242} - actually a small computer sitting on a shelf in my home. That's the server.

You, using a Windows laptop, can open your command line and type @tt{telnet okaga.emsenn.net 4242}. That's your client, and when you connect, you'll be interfacing with the MUD through its MUDSocket service.
** Events and Services

A running Racket-MUD server is always tick-tocking: it calls a set of routine procedures, over and over again, until told to stop by an administrator. A tick is the basic unit of game time: each tick, every scheduled event is triggered, and every service is told to tick.

Events are procedures which work with data internal to the engine, and services are collections of procedures which represent either continously-active things like weather systems, or interfaces like the MUDSocket or web interfaces.

Events are scheduled, meaning stored in a list until the next tick, and then called, rather than being called directly. This helps keep time linear within the engine.

Say you're connected to the Okaga with telnet, and it's tick number 2,047,183 since the engine was started. You're standing in the corridor outside a mess hall, and you submit the command to enter the mess: "go mess"

On tick ...184, after triggering all scheduled events, the engine ticks every service, including the MUDSocket service through which you're connected. The MUDSocket sees that you've submitted a command, and schedules an event to parse it.

On tick 185, the parse event is called, being provided with the in-engine thing representing you, and your command. It does some work to find the appropriate command parser, and then parses the command, scheduling its request.

So on tick 186, the go event is called, being provided with you and your desired destination. The move procedure determines if it's a valid destination, and since it is, it modifies the things representing you, the corridor, and the mess hall to properly track your location, and schedules events like showing "Aleph enters the mess hall," to everyone standing in the mess hall.
*** Things and Qualities
I mentioned "things" a few times in the previous section, and unfortunately, that's because it's yet another bit of jargon.

Things are in-engine, well, things. Depending on what optional libraries the engine you're connecting to might be running, things might be everything from a sword to a whale to an office in a skyscraper.

Things have qualities. The qualities a thing has - and the value of those qualities - determine the thing's abilities and what can be done with it.

For example, on server running The Okaga, there are quite a few types of things: two of which are rooms and people. Rooms have a quality, exits, that people don't have, while people have a hitpoints quality that rooms don't have. Both types of things have inventory qualities, though.
*** Engines and Libraries
In the previous section I mentioned that the server running The Okaga is using a library. Racket-MUD is intended to be a very basic game engine on its own, so is designed with the intention that additional "MUD libraries" (or "mudlibs") be run on the server to add game or utility features.

At the moment, Racket-MUD is too early in its development to actually have libraries, so I can't provide a realistic-sounding example for this one.
*** Overview
So, a MUD server running on the Racket-MUD engine will probably use several MUD libraries to provide a variety of services and events which provide the game features.

The clients interface with the engine through running services, like the one providing an interface through the telnet protocol. Other services maintain game features like weather or NPC movement.

Client interaction and services schedule events, which are procedures affecting things and their qualities, occuring over a continous series of ticks. This moves "time" forward within the engine.
** Commands
*** TODO Account
*** TODO Alias
*** Commands
*** Finger
*** Help
*** Who
** Account Management
Once you create a user account, other people can find out information about it by using the 'finger' command with your user-name. You can customize what information is displayed here with the 'account' command.
** The Talker
* Host Manual
  :PROPERTIES:
  :EXPORT_FILE_NAME: host-manual
  :EXPORT_HUGO_TYPE: documentation
  :END:
I'm glad you want to host a MUD using Racket-MUD. I'd discourage it until at least version 0.3.0, though. If you insist on it, clone the repo and run =racket main.rkt=
* Development Guides
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: development-guides
  :END:
** Development Guides
  :PROPERTIES:
  :EXPORT_FILE_NAME: _index
  :EXPORT_HUGO_TYPE: documentation
  :EXPORT_HUGO_LAYOUT: section
  :END:

** Engine Development
   :PROPERTIES:
   :EXPORT_FILE_NAME: engine-development
   :END:
The Racket-MUD engine may just be the core features of a MUD engine, but that there's still a lot to it!

I'd love help developing this thing: I'm really new to writing Racket, and I'm only a hobbyist programmer to start with.
*** Style Guide
Figure libraries and engines should follow the same style guide, but y'know if you're making you're own library, you should feel free tod o whatever you want.
**** Versioning
This project will use semantic versioning (SemVer: https://semver.org) for all versions past version 1.0.0. Each version number has three parts: for version 1.23.4, 1 is the major version, 23 is the minor version, and 4 is the patch. Major versions are incremented when a non-compatible change is made to the software's API, requiring a change in the code of that software which uses it. Minor versions are incremented when compatible changes are made to the API, and patches are incremented when the version upgrade just deals with fixing bugs.

Prior to version 1.0.0, there is no point in history against which the API's compatibility might be measured, so the minor version is incremented any time the API is changed, whether it breaks compatibility or not. It should be assumed that every minor version is incompatible with any previous version. Patches work the same.
**** Writing Documentation
- Write documentation in plural first: we, our, ours.
*** Further Reading
- https://github.com/Cheekyshroom/racketMUD/
- https://github.com/vaelen/vaelen-mush/blob/master/server.rkt
- http://faqs.cs.uu.nl/na-dir/games/mud-faq/lp.html
- http://www.topmudsites.com/forums/showthread.php?t=4845
- https://www.raphkoster.com/games/snippets/lpmuds-vs-diku-muds/
* Known Libraries
  :PROPERTIES:
  :EXPORT_FILE_NAME: known-libraries
  :EXPORT_HUGO_TYPE: project
  :END:
#+TOC: headlines local 1
** RPG Basics
     :PROPERTIES:
     :CUSTOM_ID: rpg-basics
     :END:
*/RPG Basics/* is a library for adding lots of features oriented toward a first-person role-playing game: commands such as =move= and =say=, services for handling a game map, stuff like that. Read more at [[../libraries/rpg-basics/][RPG Basics]].
* Known Servers
  :PROPERTIES:
  :EXPORT_FILE_NAME: known-servers
  :EXPORT_HUGO_TYPE: project
  :END:
#+TOC: headlines local 1
** Racket-MUD Development Server
The */Racket-MUD Development Server/* is a server running the Racket-MUD core library, but also the [[#rpg-basics][/RPG Basics/]] and /Teraum/ libraries. Teraum is a proprietary library created by emsenn, and is where some of the cutting-edge RPG features are developed.
* Roadmap
  :PROPERTIES:
  :EXPORT_FILE_NAME: roadmap
  :EXPORT_HUGO_TYPE: project
  :END:
Right now, Racket-MUD is in super-duper-early-alpha development: it's barely even functional, and not even close to being a viable product, no matter how minimal your criteria. I'd say bugs are common, but the truth is, it's properly-functioning code that's the rarity.

Nevertheless, we do have fond aspirations for where the project will end up. What follows is a listing of planned (or hopeful) features, categorized by which version in which we plan to release them. (To learn how Racket-MUD uses versioning numbers, see Versioning.)
** 0.1.0: The Basics
The first release of Racket-MUD, our expectations for this version are relatively limited. The concepts of events, services, things, qualities, and a ticking engine should be implemented. There should be a MUDSocket service handling a socket server, a user account service handling the loading, saving, and modification of persistent user accounts, a talker service handling receiving and distribution of chat messages, and whatever events and qualities are required to make those work. Connected users should also have at least the following commands available:

- finger
- help
- talker
- who
** 0.2.0: Libraries
The second release of Racket-MUD should provide for loading in additional services, events, and qualities as a MUD library. Connected users should gain at least the following commands:
** 0.3.0: Protocols
The third release of Racket-MUD should be focused around improving the MUDSocket service, making it a more proper telnet server, and exploring the addition of MUD extensions to the protocol, like MCCP or MCSP or whatever.
* Changelog
  :PROPERTIES:
  :EXPORT_FILE_NAME: changelog
  :EXPORT_HUGO_TYPE: project
  :END:
There is no changelog right now, since there's no minor version out yet!
* Libraries
  :PROPERTIES:
  :EXPORT_FILE_NAME: _index
  :EXPORT_HUGO_SECTION: libraries
  :END:
